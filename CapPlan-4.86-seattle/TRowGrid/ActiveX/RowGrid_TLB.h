// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision: 1.26 $
// File generated on 02-Dec-12 12:31:18 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\code\p_plan\TRowGrid\ActiveX\RowGrid.tlb (1)
// LIBID: {A5AA4A02-3A94-470E-A722-A5E960728FCC}
// LCID: 0
// Helpfile: 
// HelpString: RowGrid Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   RowGrid_TLBH
#define   RowGrid_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Rowgrid_tlb
{

// *********************************************************************//
// HelpString: RowGrid Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern "C" const __declspec(selectany) GUID LIBID_RowGrid = {0xA5AA4A02, 0x3A94, 0x470E,{ 0xA7, 0x22, 0xA5,0xE9, 0x60, 0x72,0x8F, 0xCC} };
extern "C" const __declspec(selectany) GUID IID_IRowGridX = {0x4925E453, 0xCF76, 0x4DB6,{ 0xB4, 0x90, 0xB2,0x81, 0xD1, 0xA9,0x43, 0x1F} };
extern "C" const __declspec(selectany) GUID DIID_IRowGridXEvents = {0x6A7E7D31, 0xE04C, 0x4D89,{ 0xB0, 0x86, 0x5F,0xDE, 0x2D, 0x69,0x21, 0xDB} };
extern "C" const __declspec(selectany) GUID CLSID_RowGridX = {0x453EF49A, 0xBA60, 0x48E8,{ 0x80, 0x0D, 0x46,0x11, 0x65, 0x26,0xC4, 0x71} };
extern "C" const __declspec(selectany) GUID GUID_TxDragState = {0x70A4F85C, 0xDC04, 0x464C,{ 0xA3, 0xD8, 0x2B,0x53, 0x81, 0xA9,0x27, 0x1C} };
extern "C" const __declspec(selectany) GUID GUID_TxDragMode = {0xABF16309, 0x3CEF, 0x421A,{ 0xB8, 0x48, 0x12,0xA7, 0xA9, 0x5A,0x6C, 0xB9} };
extern "C" const __declspec(selectany) GUID IID_IRowCellX = {0x12F262C0, 0x20DE, 0x4A15,{ 0x9E, 0xE7, 0x18,0x9E, 0x98, 0xA8,0xBF, 0x20} };
extern "C" const __declspec(selectany) GUID CLSID_RowCellX = {0x6D7B68E9, 0xC371, 0x44AC,{ 0x84, 0x9E, 0x2F,0x60, 0xDB, 0x0F,0xE8, 0xD2} };
extern "C" const __declspec(selectany) GUID GUID_TxRowCell = {0xEE20D60F, 0xDB51, 0x426B,{ 0x82, 0xB8, 0x25,0xFB, 0x15, 0xA2,0x98, 0x15} };
extern "C" const __declspec(selectany) GUID GUID_TxRect = {0x9074D05A, 0x4538, 0x486A,{ 0xAB, 0x1C, 0x0A,0xA7, 0x73, 0xBD,0x1A, 0x6B} };
extern "C" const __declspec(selectany) GUID IID_IRectX = {0x346DE116, 0x0A7F, 0x4392,{ 0xBD, 0x6F, 0x60,0x91, 0xFE, 0x2D,0x9D, 0xA7} };
extern "C" const __declspec(selectany) GUID CLSID_RectX = {0x719EABE5, 0xDBD1, 0x453D,{ 0x8C, 0x19, 0x38,0x5D, 0xEA, 0x02,0xB0, 0x54} };
extern "C" const __declspec(selectany) GUID GUID_TxCellState = {0x454D4A68, 0x8131, 0x4B61,{ 0x81, 0x99, 0xE2,0x57, 0xAC, 0xD7,0xE7, 0x21} };
extern "C" const __declspec(selectany) GUID GUID_TxMouseButton = {0x84A5F25D, 0x2A27, 0x4A9E,{ 0x9F, 0x28, 0x21,0xA9, 0x1D, 0xFD,0x81, 0x06} };

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      TxDragState;
enum      TxDragMode;
struct    tagTxRowCell;
typedef   tagTxRowCell TxRowCell;

struct    tagTxRect;
typedef   tagTxRect TxRect;

enum      TxCellState;
enum      TxMouseButton;
interface DECLSPEC_UUID("{4925E453-CF76-4DB6-B490-B281D1A9431F}") IRowGridX;
typedef TComInterface<IRowGridX, &IID_IRowGridX> IRowGridXPtr;

interface DECLSPEC_UUID("{6A7E7D31-E04C-4D89-B086-5FDE2D6921DB}") IRowGridXEvents;
typedef TComInterface<IRowGridXEvents, &DIID_IRowGridXEvents> IRowGridXEventsPtr;

interface DECLSPEC_UUID("{12F262C0-20DE-4A15-9EE7-189E98A8BF20}") IRowCellX;
typedef TComInterface<IRowCellX, &IID_IRowCellX> IRowCellXPtr;

interface DECLSPEC_UUID("{346DE116-0A7F-4392-BD6F-6091FE2D9DA7}") IRectX;
typedef TComInterface<IRectX, &IID_IRectX> IRectXPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IRowGridX RowGridX;
typedef IRowGridXPtr RowGridXPtr;
typedef IRowCellX RowCellX;
typedef IRowCellXPtr RowCellXPtr;
typedef IRectX RectX;
typedef IRectXPtr RectXPtr;

#define LIBID_OF_RowGridX (&LIBID_RowGrid)
#define LIBID_OF_RowCellX (&LIBID_RowGrid)
#define LIBID_OF_RectX (&LIBID_RowGrid)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum TxDragState
{
  dsDragDrop = 0, 
  dsCopyDrop = 1, 
  dsInsert = 2, 
  dsNone = 3
} TxDragState;

typedef enum TxDragMode
{
  dmManual = 0, 
  dmAutomatic = 1
} TxDragMode;

typedef enum TxCellState
{
  csLeft = 0, 
  csCenter = 1, 
  csRight = 2, 
  csEmpty = 3, 
  csNone = 4
} TxCellState;

typedef enum TxMouseButton
{
  mbLeft = 0, 
  mbRight = 1, 
  mbMiddle = 2
} TxMouseButton;


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
struct tagTxRowCell
{
  int Row;
  int Start;
  int Units;
  int Zorder;
  void* ObjectPtr;
};

struct tagTxRect
{
  int Left;
  int Top;
  int Right;
  int Bottom;
};

// *********************************************************************//
// Interface: IRowGridX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4925E453-CF76-4DB6-B490-B281D1A9431F}
// *********************************************************************//
interface IRowGridX  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_DragState(Rowgrid_tlb::TxDragState* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE ClearDragState(void) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_Units(long* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_Units(long Value/*[in]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE get_TickColor(::OLE_COLOR* Value/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE set_TickColor(::OLE_COLOR Value/*[in]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE get_RowCount(long* Value/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE set_RowCount(long Value/*[in]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE get_RowHeight(long* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE set_RowHeight(long Value/*[in]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE get_RowLineWidth(long* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE set_RowLineWidth(long Value/*[in]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE get_UnitWidth(long* Value/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE set_UnitWidth(long Value/*[in]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE get_FrameWidth(long* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE set_FrameWidth(long Value/*[in]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_CellFrameWidth(long* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE set_CellFrameWidth(long Value/*[in]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE get_CellBorderWidth(long* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE set_CellBorderWidth(long Value/*[in]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_DefaultDrawing(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_DefaultDrawing(VARIANT_BOOL Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE get_CheckPosition(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE set_CheckPosition(VARIANT_BOOL Value/*[in]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE get_MinVisible(long* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_MinVisible(long Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_RowLineColor(::OLE_COLOR* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE set_RowLineColor(::OLE_COLOR Value/*[in]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_CellColor(::OLE_COLOR* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_CellColor(::OLE_COLOR Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE set_Ctl3D(VARIANT_BOOL Value/*[in]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE get_Color(::OLE_COLOR* Value/*[out,retval]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE set_Color(::OLE_COLOR Value/*[in]*/) = 0; // [-501]
  virtual HRESULT STDMETHODCALLTYPE get_DragCursor(short* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE set_DragCursor(short Value/*[in]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_DragMode(Rowgrid_tlb::TxDragMode* Value/*[out,retval]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE set_DragMode(Rowgrid_tlb::TxDragMode Value/*[in]*/) = 0; // [27]
  virtual HRESULT STDMETHODCALLTYPE get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE set_Enabled(VARIANT_BOOL Value/*[in]*/) = 0; // [-514]
  virtual HRESULT STDMETHODCALLTYPE get_Font(IFontDisp** Value/*[out,retval]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE set_Font(IFontDisp* Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE _set_Font(IFontDisp** Value/*[in]*/) = 0; // [-512]
  virtual HRESULT STDMETHODCALLTYPE get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE set_ParentColor(VARIANT_BOOL Value/*[in]*/) = 0; // [28]
  virtual HRESULT STDMETHODCALLTYPE get_Visible(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE set_Visible(VARIANT_BOOL Value/*[in]*/) = 0; // [29]
  virtual HRESULT STDMETHODCALLTYPE get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/) = 0; // [30]
  virtual HRESULT STDMETHODCALLTYPE get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [31]
  virtual HRESULT STDMETHODCALLTYPE get_VisibleDockClientCount(long* Value/*[out,retval]*/) = 0; // [32]
  virtual HRESULT STDMETHODCALLTYPE DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/) = 0; // [34]
  virtual HRESULT STDMETHODCALLTYPE IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [36]
  virtual HRESULT STDMETHODCALLTYPE UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [39]
  virtual HRESULT STDMETHODCALLTYPE UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [40]
  virtual HRESULT STDMETHODCALLTYPE SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/) = 0; // [42]
  virtual HRESULT STDMETHODCALLTYPE GetCellArray(LPSAFEARRAY* RowCells/*[out]*/, 
                                                 long* ArraySize/*[out]*/, long Row/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE InsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE RemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE MouseToCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out]*/, 
                                                long X/*[in]*/, long Y/*[in]*/, 
                                                Rowgrid_tlb::TxCellState* CellState/*[out]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_ClientWidth(long* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_ClientWidth(long Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_ClientHeight(long* Value/*[out,retval]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE set_ClientHeight(long Value/*[in]*/) = 0; // [33]
  virtual HRESULT STDMETHODCALLTYPE get_HDC(void** Value/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE ClearRow(long Row/*[in]*/) = 0; // [35]
  virtual HRESULT STDMETHODCALLTYPE get_VerticalRows(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE set_VerticalRows(VARIANT_BOOL Value/*[in]*/) = 0; // [37]
  virtual HRESULT STDMETHODCALLTYPE get_AltKeyInserts(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE set_AltKeyInserts(VARIANT_BOOL Value/*[in]*/) = 0; // [38]
  virtual HRESULT STDMETHODCALLTYPE get_ShiftKeyHolds(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE set_ShiftKeyHolds(VARIANT_BOOL Value/*[in]*/) = 0; // [41]
  virtual HRESULT STDMETHODCALLTYPE get_CellState(Rowgrid_tlb::TxCellState* Value/*[out,retval]*/) = 0; // [43]
  virtual HRESULT STDMETHODCALLTYPE get_DragCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out,retval]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE set_DragCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/) = 0; // [44]
  virtual HRESULT STDMETHODCALLTYPE SortRow(long Row/*[in]*/) = 0; // [45]
  virtual HRESULT STDMETHODCALLTYPE get_ShiftKeySwaps(VARIANT_BOOL* Value/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE set_ShiftKeySwaps(VARIANT_BOOL Value/*[in]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE PaintCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                              VARIANT_BOOL ClearOnly/*[in]*/) = 0; // [46]
  virtual HRESULT STDMETHODCALLTYPE CellRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, 
                                             Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/) = 0; // [47]
  virtual HRESULT STDMETHODCALLTYPE RowLineRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, 
                                                long Row/*[in]*/) = 0; // [48]
  virtual HRESULT STDMETHODCALLTYPE ToggleFocus(void) = 0; // [49]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Rowgrid_tlb::TxDragState __fastcall get_DragState(void)
  {
    Rowgrid_tlb::TxDragState Value;
    OLECHECK(this->get_DragState((Rowgrid_tlb::TxDragState*)&Value));
    return Value;
  }

  long __fastcall get_Units(void)
  {
    long Value;
    OLECHECK(this->get_Units((long*)&Value));
    return Value;
  }

  ::OLE_COLOR __fastcall get_TickColor(void)
  {
    ::OLE_COLOR Value;
    OLECHECK(this->get_TickColor((::OLE_COLOR*)&Value));
    return Value;
  }

  long __fastcall get_RowCount(void)
  {
    long Value;
    OLECHECK(this->get_RowCount((long*)&Value));
    return Value;
  }

  long __fastcall get_RowHeight(void)
  {
    long Value;
    OLECHECK(this->get_RowHeight((long*)&Value));
    return Value;
  }

  long __fastcall get_RowLineWidth(void)
  {
    long Value;
    OLECHECK(this->get_RowLineWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_UnitWidth(void)
  {
    long Value;
    OLECHECK(this->get_UnitWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_FrameWidth(void)
  {
    long Value;
    OLECHECK(this->get_FrameWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_CellFrameWidth(void)
  {
    long Value;
    OLECHECK(this->get_CellFrameWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_CellBorderWidth(void)
  {
    long Value;
    OLECHECK(this->get_CellBorderWidth((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DefaultDrawing(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DefaultDrawing((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_CheckPosition(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_CheckPosition((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_MinVisible(void)
  {
    long Value;
    OLECHECK(this->get_MinVisible((long*)&Value));
    return Value;
  }

  ::OLE_COLOR __fastcall get_RowLineColor(void)
  {
    ::OLE_COLOR Value;
    OLECHECK(this->get_RowLineColor((::OLE_COLOR*)&Value));
    return Value;
  }

  ::OLE_COLOR __fastcall get_CellColor(void)
  {
    ::OLE_COLOR Value;
    OLECHECK(this->get_CellColor((::OLE_COLOR*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Ctl3D(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Ctl3D((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_ParentCtl3D(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ParentCtl3D((VARIANT_BOOL*)&Value));
    return Value;
  }

  ::OLE_COLOR __fastcall get_Color(void)
  {
    ::OLE_COLOR Value;
    OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
    return Value;
  }

  short __fastcall get_DragCursor(void)
  {
    short Value;
    OLECHECK(this->get_DragCursor((short*)&Value));
    return Value;
  }

  Rowgrid_tlb::TxDragMode __fastcall get_DragMode(void)
  {
    Rowgrid_tlb::TxDragMode Value;
    OLECHECK(this->get_DragMode((Rowgrid_tlb::TxDragMode*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Enabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  IFontDisp* __fastcall get_Font(void)
  {
    IFontDisp* Value;
    OLECHECK(this->get_Font((IFontDisp**)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_ParentColor(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ParentColor((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_Visible(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_DoubleBuffered(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AlignDisabled(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_VisibleDockClientCount(void)
  {
    long Value;
    OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
    return Value;
  }

  long __fastcall DrawTextBiDiModeFlagsReadingOnly(void)
  {
    long Value;
    OLECHECK(this->DrawTextBiDiModeFlagsReadingOnly((long*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall IsRightToLeft(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->IsRightToLeft((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall UseRightToLeftReading(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->UseRightToLeftReading((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall UseRightToLeftScrollBar(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->UseRightToLeftScrollBar((VARIANT_BOOL*)&Value));
    return Value;
  }

  long __fastcall get_ClientWidth(void)
  {
    long Value;
    OLECHECK(this->get_ClientWidth((long*)&Value));
    return Value;
  }

  long __fastcall get_ClientHeight(void)
  {
    long Value;
    OLECHECK(this->get_ClientHeight((long*)&Value));
    return Value;
  }

  void* __fastcall get_HDC(void)
  {
    void* Value = 0;
    OLECHECK(this->get_HDC((void**)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_VerticalRows(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_VerticalRows((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_AltKeyInserts(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_AltKeyInserts((VARIANT_BOOL*)&Value));
    return Value;
  }

  VARIANT_BOOL __fastcall get_ShiftKeyHolds(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ShiftKeyHolds((VARIANT_BOOL*)&Value));
    return Value;
  }

  Rowgrid_tlb::TxCellState __fastcall get_CellState(void)
  {
    Rowgrid_tlb::TxCellState Value;
    OLECHECK(this->get_CellState((Rowgrid_tlb::TxCellState*)&Value));
    return Value;
  }

  Rowgrid_tlb::IRowCellX* __fastcall get_DragCell(void)
  {
    Rowgrid_tlb::IRowCellX* RowCellX;
    OLECHECK(this->get_DragCell((Rowgrid_tlb::IRowCellX**)&RowCellX));
    return RowCellX;
  }

  VARIANT_BOOL __fastcall get_ShiftKeySwaps(void)
  {
    VARIANT_BOOL Value;
    OLECHECK(this->get_ShiftKeySwaps((VARIANT_BOOL*)&Value));
    return Value;
  }


  __property   Rowgrid_tlb::TxDragState DragState = {read = get_DragState};
  __property   long            Units = {read = get_Units, write = set_Units};
  __property   ::OLE_COLOR     TickColor = {read = get_TickColor, write = set_TickColor};
  __property   long            RowCount = {read = get_RowCount, write = set_RowCount};
  __property   long            RowHeight = {read = get_RowHeight, write = set_RowHeight};
  __property   long            RowLineWidth = {read = get_RowLineWidth, write = set_RowLineWidth};
  __property   long            UnitWidth = {read = get_UnitWidth, write = set_UnitWidth};
  __property   long            FrameWidth = {read = get_FrameWidth, write = set_FrameWidth};
  __property   long            CellFrameWidth = {read = get_CellFrameWidth, write = set_CellFrameWidth};
  __property   long            CellBorderWidth = {read = get_CellBorderWidth, write = set_CellBorderWidth};
  __property   VARIANT_BOOL    DefaultDrawing = {read = get_DefaultDrawing, write = set_DefaultDrawing};
  __property   VARIANT_BOOL    CheckPosition = {read = get_CheckPosition, write = set_CheckPosition};
  __property   long            MinVisible = {read = get_MinVisible, write = set_MinVisible};
  __property   ::OLE_COLOR     RowLineColor = {read = get_RowLineColor, write = set_RowLineColor};
  __property   ::OLE_COLOR     CellColor = {read = get_CellColor, write = set_CellColor};
  __property   VARIANT_BOOL    Ctl3D = {read = get_Ctl3D, write = set_Ctl3D};
  __property   VARIANT_BOOL    ParentCtl3D = {read = get_ParentCtl3D, write = set_ParentCtl3D};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   short           DragCursor = {read = get_DragCursor, write = set_DragCursor};
  __property   Rowgrid_tlb::TxDragMode DragMode = {read = get_DragMode, write = set_DragMode};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   void*           HDC = {read = get_HDC};
  __property   VARIANT_BOOL    VerticalRows = {read = get_VerticalRows, write = set_VerticalRows};
  __property   VARIANT_BOOL    AltKeyInserts = {read = get_AltKeyInserts, write = set_AltKeyInserts};
  __property   VARIANT_BOOL    ShiftKeyHolds = {read = get_ShiftKeyHolds, write = set_ShiftKeyHolds};
  __property   Rowgrid_tlb::TxCellState CellState = {read = get_CellState};
  __property   Rowgrid_tlb::IRowCellX* DragCell = {read = get_DragCell, write = set_DragCell};
  __property   VARIANT_BOOL    ShiftKeySwaps = {read = get_ShiftKeySwaps, write = set_ShiftKeySwaps};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IRowGridXEvents
// Flags:     (4096) Dispatchable
// GUID:      {6A7E7D31-E04C-4D89-B086-5FDE2D6921DB}
// *********************************************************************//
interface IRowGridXEvents : public TDispWrapper<IDispatch>
{
  void __fastcall OnKeyPress(short* Key/*[in,out]*/)
  {
    _TDispID _dispid(/* OnKeyPress */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Key /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnCanResize(long* NewWidth/*[in,out]*/, long* NewHeight/*[in,out]*/, 
                              VARIANT_BOOL* Resize/*[in,out]*/)
  {
    _TDispID _dispid(/* OnCanResize */ DISPID(14));
    TAutoArgs<3> _args;
    _args[1] = NewWidth /*[VT_I4:1]*/;
    _args[2] = NewHeight /*[VT_I4:1]*/;
    _args[3] = Resize /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnClick()
  {
    _TDispID _dispid(/* OnClick */ DISPID(15));
    OleProcedure(_dispid);
  }

  void __fastcall OnConstrainedResize(long* MinWidth/*[in,out]*/, long* MinHeight/*[in,out]*/, 
                                      long* MaxWidth/*[in,out]*/, long* MaxHeight/*[in,out]*/)
  {
    _TDispID _dispid(/* OnConstrainedResize */ DISPID(16));
    TAutoArgs<4> _args;
    _args[1] = MinWidth /*[VT_I4:1]*/;
    _args[2] = MinHeight /*[VT_I4:1]*/;
    _args[3] = MaxWidth /*[VT_I4:1]*/;
    _args[4] = MaxHeight /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClick()
  {
    _TDispID _dispid(/* OnDblClick */ DISPID(18));
    OleProcedure(_dispid);
  }

  void __fastcall OnResize()
  {
    _TDispID _dispid(/* OnResize */ DISPID(29));
    OleProcedure(_dispid);
  }

  void __fastcall OnInsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                  VARIANT_BOOL* CanInsert/*[in,out]*/)
  {
    _TDispID _dispid(/* OnInsertRowCell */ DISPID(1));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
    _args[2] = CanInsert /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnRemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                  VARIANT_BOOL* CanRemove/*[in,out]*/)
  {
    _TDispID _dispid(/* OnRemoveRowCell */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
    _args[2] = CanRemove /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDrawRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                Rowgrid_tlb::IRectX* RectX/*[in]*/)
  {
    _TDispID _dispid(/* OnDrawRowCell */ DISPID(3));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPUNKNOWN)(Rowgrid_tlb::IRectX*)RectX /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDragRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                Rowgrid_tlb::TxCellState CellState/*[in]*/, 
                                VARIANT_BOOL IsCopy/*[in]*/, VARIANT_BOOL* CanDrag/*[in,out]*/)
  {
    _TDispID _dispid(/* OnDragRowCell */ DISPID(4));
    TAutoArgs<4> _args;
    _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
    _args[2] = (int)CellState /*[VT_USERDEFINED:0]*/;
    _args[3] = IsCopy /*[VT_BOOL:0]*/;
    _args[4] = CanDrag /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDblClickRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
  {
    _TDispID _dispid(/* OnDblClickRowCell */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseDown(Rowgrid_tlb::TxMouseButton MouseButton/*[in]*/, 
                              unsigned_char ShiftState/*[in]*/, long X/*[in]*/, long Y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseDown */ DISPID(7));
    TAutoArgs<4> _args;
    _args[1] = (int)MouseButton /*[VT_USERDEFINED:0]*/;
    _args[2] = ShiftState /*[VT_UI1:0]*/;
    _args[3] = X /*[VT_I4:0]*/;
    _args[4] = Y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseUp(Rowgrid_tlb::TxMouseButton MouseButton/*[in]*/, 
                            unsigned_char ShiftState/*[in]*/, long X/*[in]*/, long Y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseUp */ DISPID(8));
    TAutoArgs<4> _args;
    _args[1] = (int)MouseButton /*[VT_USERDEFINED:0]*/;
    _args[2] = ShiftState /*[VT_UI1:0]*/;
    _args[3] = X /*[VT_I4:0]*/;
    _args[4] = Y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnMouseMove(unsigned_char ShiftState/*[in]*/, long X/*[in]*/, long Y/*[in]*/)
  {
    _TDispID _dispid(/* OnMouseMove */ DISPID(9));
    TAutoArgs<3> _args;
    _args[1] = ShiftState /*[VT_UI1:0]*/;
    _args[2] = X /*[VT_I4:0]*/;
    _args[3] = Y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnKeyDown(unsigned_short* Key/*[in,out]*/, unsigned_char ShiftState/*[in]*/)
  {
    _TDispID _dispid(/* OnKeyDown */ DISPID(10));
    TAutoArgs<2> _args;
    _args[1] = Key /*[VT_UI2:1]*/;
    _args[2] = ShiftState /*[VT_UI1:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnDrawRowLine(long Row/*[in]*/, Rowgrid_tlb::IRectX* RectX/*[in]*/)
  {
    _TDispID _dispid(/* OnDrawRowLine */ DISPID(12));
    TAutoArgs<2> _args;
    _args[1] = Row /*[VT_I4:0]*/;
    _args[2] = (LPUNKNOWN)(Rowgrid_tlb::IRectX*)RectX /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnClearRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                 VARIANT_BOOL* CanClear/*[in,out]*/)
  {
    _TDispID _dispid(/* OnClearRowCell */ DISPID(13));
    TAutoArgs<2> _args;
    _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
    _args[2] = CanClear /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall OnPaint()
  {
    _TDispID _dispid(/* OnPaint */ DISPID(5));
    OleProcedure(_dispid);
  }

  void __fastcall OnDrawFocusRect(Rowgrid_tlb::IRectX* RectX/*[in]*/)
  {
    _TDispID _dispid(/* OnDrawFocusRect */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRectX*)RectX /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IRowCellX
// Flags:     (256) OleAutomation
// GUID:      {12F262C0-20DE-4A15-9EE7-189E98A8BF20}
// *********************************************************************//
interface IRowCellX  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Row(long* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Row(long Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Start(long* Value/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE set_Start(long Value/*[in]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE get_Units(long* Value/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE set_Units(long Value/*[in]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE get_Zorder(long* Value/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE set_Zorder(long Value/*[in]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE get_ObjectPtr(void** Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE set_ObjectPtr(void* Value/*[in]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE equals(VARIANT_BOOL* IsEqual/*[out]*/, 
                                           Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/) = 0; // [6]
};

// *********************************************************************//
// Interface: IRectX
// Flags:     (256) OleAutomation
// GUID:      {346DE116-0A7F-4392-BD6F-6091FE2D9DA7}
// *********************************************************************//
interface IRectX  : public IUnknown
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Left(long* Value/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE set_Left(long Value/*[in]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE get_Top(long* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE set_Top(long Value/*[in]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE get_Right(long* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE set_Right(long Value/*[in]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE get_Bottom(long* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE set_Bottom(long Value/*[in]*/) = 0; // [9]
};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIRowGridX
// Interface: IRowGridX
// *********************************************************************//
template <class T /* IRowGridX */ >
class TCOMIRowGridXT : public TComInterface<IRowGridX>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRowGridXT() {}
  TCOMIRowGridXT(IRowGridX *intf, bool addRef = false) : TComInterface<IRowGridX>(intf, addRef) {}
  TCOMIRowGridXT(const TCOMIRowGridXT& src) : TComInterface<IRowGridX>(src) {}
  TCOMIRowGridXT& operator=(const TCOMIRowGridXT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_DragState(Rowgrid_tlb::TxDragState* Value/*[out,retval]*/);
  Rowgrid_tlb::TxDragState __fastcall get_DragState(void);
  HRESULT         __fastcall ClearDragState(void);
  HRESULT         __fastcall get_Units(long* Value/*[out,retval]*/);
  long            __fastcall get_Units(void);
  HRESULT         __fastcall set_Units(long Value/*[in]*/);
  HRESULT         __fastcall get_TickColor(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_TickColor(void);
  HRESULT         __fastcall set_TickColor(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_RowCount(long* Value/*[out,retval]*/);
  long            __fastcall get_RowCount(void);
  HRESULT         __fastcall set_RowCount(long Value/*[in]*/);
  HRESULT         __fastcall get_RowHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_RowHeight(void);
  HRESULT         __fastcall set_RowHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_RowLineWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_RowLineWidth(void);
  HRESULT         __fastcall set_RowLineWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_UnitWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_UnitWidth(void);
  HRESULT         __fastcall set_UnitWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_FrameWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_FrameWidth(void);
  HRESULT         __fastcall set_FrameWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_CellFrameWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_CellFrameWidth(void);
  HRESULT         __fastcall set_CellFrameWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_CellBorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_CellBorderWidth(void);
  HRESULT         __fastcall set_CellBorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_DefaultDrawing(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_DefaultDrawing(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DefaultDrawing(void);
  HRESULT         __fastcall set_DefaultDrawing(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_DefaultDrawing(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_CheckPosition(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_CheckPosition(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_CheckPosition(void);
  HRESULT         __fastcall set_CheckPosition(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_CheckPosition(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_MinVisible(long* Value/*[out,retval]*/);
  long            __fastcall get_MinVisible(void);
  HRESULT         __fastcall set_MinVisible(long Value/*[in]*/);
  HRESULT         __fastcall get_RowLineColor(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_RowLineColor(void);
  HRESULT         __fastcall set_RowLineColor(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_CellColor(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_CellColor(void);
  HRESULT         __fastcall set_CellColor(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Ctl3D(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Ctl3D(void);
  HRESULT         __fastcall set_Ctl3D(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Ctl3D(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_ParentCtl3D(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ParentCtl3D(void);
  HRESULT         __fastcall set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_ParentCtl3D(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_DragCursor(short* Value/*[out,retval]*/);
  short           __fastcall get_DragCursor(void);
  HRESULT         __fastcall set_DragCursor(short Value/*[in]*/);
  HRESULT         __fastcall get_DragMode(Rowgrid_tlb::TxDragMode* Value/*[out,retval]*/);
  Rowgrid_tlb::TxDragMode __fastcall get_DragMode(void);
  HRESULT         __fastcall set_DragMode(Rowgrid_tlb::TxDragMode Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Enabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Enabled(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_ParentColor(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_ParentColor(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_Visible(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_Visible(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_DoubleBuffered(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_DoubleBuffered(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/);
  long            __fastcall DrawTextBiDiModeFlagsReadingOnly(void);
  HRESULT         __fastcall IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsRightToLeft(void);
  HRESULT         __fastcall UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall UseRightToLeftReading(void);
  HRESULT         __fastcall UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall UseRightToLeftScrollBar(void);
  HRESULT         __fastcall SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/);
  HRESULT         __fastcall GetCellArray(LPSAFEARRAY* RowCells/*[out]*/, long* ArraySize/*[out]*/, 
                                          long Row/*[in]*/);
  HRESULT         __fastcall InsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);
  HRESULT         __fastcall RemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);
  HRESULT         __fastcall MouseToCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out]*/, long X/*[in]*/, 
                                         long Y/*[in]*/, 
                                         Rowgrid_tlb::TxCellState* CellState/*[out]*/);
  HRESULT         __fastcall get_ClientWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_HDC(void** Value/*[out,retval]*/);
  void*           __fastcall get_HDC(void);
  HRESULT         __fastcall ClearRow(long Row/*[in]*/);
  HRESULT         __fastcall get_VerticalRows(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_VerticalRows(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_VerticalRows(void);
  HRESULT         __fastcall set_VerticalRows(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_VerticalRows(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_AltKeyInserts(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_AltKeyInserts(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_AltKeyInserts(void);
  HRESULT         __fastcall set_AltKeyInserts(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_AltKeyInserts(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_ShiftKeyHolds(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_ShiftKeyHolds(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShiftKeyHolds(void);
  HRESULT         __fastcall set_ShiftKeyHolds(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_ShiftKeyHolds(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall get_CellState(Rowgrid_tlb::TxCellState* Value/*[out,retval]*/);
  Rowgrid_tlb::TxCellState __fastcall get_CellState(void);
  HRESULT         __fastcall get_DragCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out,retval]*/);
  HRESULT         __fastcall get_DragCell(Rowgrid_tlb::IRowCellXPtr* RowCellX/*[out,retval]*/);
  Rowgrid_tlb::IRowCellXPtr __fastcall get_DragCell(void);
  HRESULT         __fastcall set_DragCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);
  HRESULT         __fastcall set_DragCell(Rowgrid_tlb::IRowCellXPtr RowCellX/*[in]*/);
  HRESULT         __fastcall SortRow(long Row/*[in]*/);
  HRESULT         __fastcall get_ShiftKeySwaps(VARIANT_BOOL* Value/*[out,retval]*/);
  HRESULT         __fastcall get_ShiftKeySwaps(TOLEBOOL* Value/*[out,retval]*/);
  TOLEBOOL        __fastcall get_ShiftKeySwaps(void);
  HRESULT         __fastcall set_ShiftKeySwaps(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall set_ShiftKeySwaps(TOLEBOOL Value/*[in]*/);
  HRESULT         __fastcall PaintCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                       VARIANT_BOOL ClearOnly/*[in]*/);
  HRESULT         __fastcall CellRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, 
                                      Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);
  HRESULT         __fastcall RowLineRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, long Row/*[in]*/);
  HRESULT         __fastcall ToggleFocus(void);

  __property   Rowgrid_tlb::TxDragState DragState = {read = get_DragState};
  __property   long            Units = {read = get_Units, write = set_Units};
  __property   ::OLE_COLOR     TickColor = {read = get_TickColor, write = set_TickColor};
  __property   long            RowCount = {read = get_RowCount, write = set_RowCount};
  __property   long            RowHeight = {read = get_RowHeight, write = set_RowHeight};
  __property   long            RowLineWidth = {read = get_RowLineWidth, write = set_RowLineWidth};
  __property   long            UnitWidth = {read = get_UnitWidth, write = set_UnitWidth};
  __property   long            FrameWidth = {read = get_FrameWidth, write = set_FrameWidth};
  __property   long            CellFrameWidth = {read = get_CellFrameWidth, write = set_CellFrameWidth};
  __property   long            CellBorderWidth = {read = get_CellBorderWidth, write = set_CellBorderWidth};
  __property   TOLEBOOL        DefaultDrawing = {read = get_DefaultDrawing, write = set_DefaultDrawing};
  __property   TOLEBOOL        CheckPosition = {read = get_CheckPosition, write = set_CheckPosition};
  __property   long            MinVisible = {read = get_MinVisible, write = set_MinVisible};
  __property   ::OLE_COLOR     RowLineColor = {read = get_RowLineColor, write = set_RowLineColor};
  __property   ::OLE_COLOR     CellColor = {read = get_CellColor, write = set_CellColor};
  __property   TOLEBOOL        Ctl3D = {read = get_Ctl3D, write = set_Ctl3D};
  __property   TOLEBOOL        ParentCtl3D = {read = get_ParentCtl3D, write = set_ParentCtl3D};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   short           DragCursor = {read = get_DragCursor, write = set_DragCursor};
  __property   Rowgrid_tlb::TxDragMode DragMode = {read = get_DragMode, write = set_DragMode};
  __property   TOLEBOOL        Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font};
  __property   TOLEBOOL        ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   TOLEBOOL        Visible = {read = get_Visible, write = set_Visible};
  __property   TOLEBOOL        DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   TOLEBOOL        AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   void*           HDC = {read = get_HDC};
  __property   TOLEBOOL        VerticalRows = {read = get_VerticalRows, write = set_VerticalRows};
  __property   TOLEBOOL        AltKeyInserts = {read = get_AltKeyInserts, write = set_AltKeyInserts};
  __property   TOLEBOOL        ShiftKeyHolds = {read = get_ShiftKeyHolds, write = set_ShiftKeyHolds};
  __property   Rowgrid_tlb::TxCellState CellState = {read = get_CellState};
  __property   Rowgrid_tlb::IRowCellXPtr DragCell = {read = get_DragCell, write = set_DragCell};
  __property   TOLEBOOL        ShiftKeySwaps = {read = get_ShiftKeySwaps, write = set_ShiftKeySwaps};
};
typedef TCOMIRowGridXT<IRowGridX> TCOMIRowGridX;

// *********************************************************************//
// DispIntf:  IRowGridX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4925E453-CF76-4DB6-B490-B281D1A9431F}
// *********************************************************************//
template<class T>
class IRowGridXDispT : public TAutoDriver<IRowGridX>
{
public:
  IRowGridXDispT(){}

  IRowGridXDispT(IRowGridX *pintf)
  {
    TAutoDriver<IRowGridX>::Bind(pintf, false);
  }

  IRowGridXDispT(IRowGridXPtr pintf)
  {
    TAutoDriver<IRowGridX>::Bind(pintf, true);
  }

  IRowGridXDispT& operator=(IRowGridX *pintf)
  {
    TAutoDriver<IRowGridX>::Bind(pintf, false);
    return *this;
  }

  IRowGridXDispT& operator=(IRowGridXPtr pintf)
  {
    TAutoDriver<IRowGridX>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_RowGridX));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_RowGridX);
  }

  HRESULT         __fastcall get_DragState(Rowgrid_tlb::TxDragState* Value/*[out,retval]*/);
  Rowgrid_tlb::TxDragState __fastcall get_DragState(void);
  HRESULT         __fastcall ClearDragState();
  HRESULT         __fastcall get_Units(long* Value/*[out,retval]*/);
  long            __fastcall get_Units(void);
  HRESULT         __fastcall set_Units(long Value/*[in]*/);
  HRESULT         __fastcall get_TickColor(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_TickColor(void);
  HRESULT         __fastcall set_TickColor(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_RowCount(long* Value/*[out,retval]*/);
  long            __fastcall get_RowCount(void);
  HRESULT         __fastcall set_RowCount(long Value/*[in]*/);
  HRESULT         __fastcall get_RowHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_RowHeight(void);
  HRESULT         __fastcall set_RowHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_RowLineWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_RowLineWidth(void);
  HRESULT         __fastcall set_RowLineWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_UnitWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_UnitWidth(void);
  HRESULT         __fastcall set_UnitWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_FrameWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_FrameWidth(void);
  HRESULT         __fastcall set_FrameWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_CellFrameWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_CellFrameWidth(void);
  HRESULT         __fastcall set_CellFrameWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_CellBorderWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_CellBorderWidth(void);
  HRESULT         __fastcall set_CellBorderWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_DefaultDrawing(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DefaultDrawing(void);
  HRESULT         __fastcall set_DefaultDrawing(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_CheckPosition(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_CheckPosition(void);
  HRESULT         __fastcall set_CheckPosition(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_MinVisible(long* Value/*[out,retval]*/);
  long            __fastcall get_MinVisible(void);
  HRESULT         __fastcall set_MinVisible(long Value/*[in]*/);
  HRESULT         __fastcall get_RowLineColor(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_RowLineColor(void);
  HRESULT         __fastcall set_RowLineColor(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_CellColor(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_CellColor(void);
  HRESULT         __fastcall set_CellColor(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Ctl3D(void);
  HRESULT         __fastcall set_Ctl3D(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentCtl3D(void);
  HRESULT         __fastcall set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Color(::OLE_COLOR* Value/*[out,retval]*/);
  ::OLE_COLOR     __fastcall get_Color(void);
  HRESULT         __fastcall set_Color(::OLE_COLOR Value/*[in]*/);
  HRESULT         __fastcall get_DragCursor(short* Value/*[out,retval]*/);
  short           __fastcall get_DragCursor(void);
  HRESULT         __fastcall set_DragCursor(short Value/*[in]*/);
  HRESULT         __fastcall get_DragMode(Rowgrid_tlb::TxDragMode* Value/*[out,retval]*/);
  Rowgrid_tlb::TxDragMode __fastcall get_DragMode(void);
  HRESULT         __fastcall set_DragMode(Rowgrid_tlb::TxDragMode Value/*[in]*/);
  HRESULT         __fastcall get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Enabled(void);
  HRESULT         __fastcall set_Enabled(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Font(IFontDisp** Value/*[out,retval]*/);
  IFontDisp*      __fastcall get_Font(void);
  HRESULT         __fastcall set_Font(IFontDisp* Value/*[in]*/);
  HRESULT         __fastcall _set_Font(IFontDisp** Value/*[in]*/);
  HRESULT         __fastcall get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ParentColor(void);
  HRESULT         __fastcall set_ParentColor(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_Visible(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Visible(void);
  HRESULT         __fastcall set_Visible(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoubleBuffered(void);
  HRESULT         __fastcall set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AlignDisabled(void);
  HRESULT         __fastcall get_VisibleDockClientCount(long* Value/*[out,retval]*/);
  long            __fastcall get_VisibleDockClientCount(void);
  HRESULT         __fastcall DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/);
  long            __fastcall DrawTextBiDiModeFlagsReadingOnly(void);
  HRESULT         __fastcall IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall IsRightToLeft(void);
  HRESULT         __fastcall UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall UseRightToLeftReading(void);
  HRESULT         __fastcall UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall UseRightToLeftScrollBar(void);
  HRESULT         __fastcall SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/);
  HRESULT         __fastcall GetCellArray(LPSAFEARRAY* RowCells/*[out]*/, long* ArraySize/*[out]*/, 
                                          long Row/*[in]*/);
  HRESULT         __fastcall InsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);
  HRESULT         __fastcall RemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);
  HRESULT         __fastcall MouseToCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out]*/, long X/*[in]*/
                                         , long Y/*[in]*/, 
                                         Rowgrid_tlb::TxCellState* CellState/*[out]*/);
  HRESULT         __fastcall get_ClientWidth(long* Value/*[out,retval]*/);
  long            __fastcall get_ClientWidth(void);
  HRESULT         __fastcall set_ClientWidth(long Value/*[in]*/);
  HRESULT         __fastcall get_ClientHeight(long* Value/*[out,retval]*/);
  long            __fastcall get_ClientHeight(void);
  HRESULT         __fastcall set_ClientHeight(long Value/*[in]*/);
  HRESULT         __fastcall get_HDC(/*AUTO_PARAM_ERROR(void** Value)*/ TVariant*  Value);
  HRESULT         __fastcall ClearRow(long Row/*[in]*/);
  HRESULT         __fastcall get_VerticalRows(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_VerticalRows(void);
  HRESULT         __fastcall set_VerticalRows(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_AltKeyInserts(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_AltKeyInserts(void);
  HRESULT         __fastcall set_AltKeyInserts(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_ShiftKeyHolds(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShiftKeyHolds(void);
  HRESULT         __fastcall set_ShiftKeyHolds(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall get_CellState(Rowgrid_tlb::TxCellState* Value/*[out,retval]*/);
  Rowgrid_tlb::TxCellState __fastcall get_CellState(void);
  HRESULT         __fastcall get_DragCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out,retval]*/);
  Rowgrid_tlb::IRowCellX* __fastcall get_DragCell(void);
  HRESULT         __fastcall set_DragCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);
  HRESULT         __fastcall SortRow(long Row/*[in]*/);
  HRESULT         __fastcall get_ShiftKeySwaps(VARIANT_BOOL* Value/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ShiftKeySwaps(void);
  HRESULT         __fastcall set_ShiftKeySwaps(VARIANT_BOOL Value/*[in]*/);
  HRESULT         __fastcall PaintCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                       VARIANT_BOOL ClearOnly/*[in]*/);
  HRESULT         __fastcall CellRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, 
                                      Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);
  HRESULT         __fastcall RowLineRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, long Row/*[in]*/);
  HRESULT         __fastcall ToggleFocus();

  __property   Rowgrid_tlb::TxDragState DragState = {read = get_DragState};
  __property   long            Units = {read = get_Units, write = set_Units};
  __property   ::OLE_COLOR     TickColor = {read = get_TickColor, write = set_TickColor};
  __property   long            RowCount = {read = get_RowCount, write = set_RowCount};
  __property   long            RowHeight = {read = get_RowHeight, write = set_RowHeight};
  __property   long            RowLineWidth = {read = get_RowLineWidth, write = set_RowLineWidth};
  __property   long            UnitWidth = {read = get_UnitWidth, write = set_UnitWidth};
  __property   long            FrameWidth = {read = get_FrameWidth, write = set_FrameWidth};
  __property   long            CellFrameWidth = {read = get_CellFrameWidth, write = set_CellFrameWidth};
  __property   long            CellBorderWidth = {read = get_CellBorderWidth, write = set_CellBorderWidth};
  __property   VARIANT_BOOL    DefaultDrawing = {read = get_DefaultDrawing, write = set_DefaultDrawing};
  __property   VARIANT_BOOL    CheckPosition = {read = get_CheckPosition, write = set_CheckPosition};
  __property   long            MinVisible = {read = get_MinVisible, write = set_MinVisible};
  __property   ::OLE_COLOR     RowLineColor = {read = get_RowLineColor, write = set_RowLineColor};
  __property   ::OLE_COLOR     CellColor = {read = get_CellColor, write = set_CellColor};
  __property   VARIANT_BOOL    Ctl3D = {read = get_Ctl3D, write = set_Ctl3D};
  __property   VARIANT_BOOL    ParentCtl3D = {read = get_ParentCtl3D, write = set_ParentCtl3D};
  __property   ::OLE_COLOR     Color = {read = get_Color, write = set_Color};
  __property   short           DragCursor = {read = get_DragCursor, write = set_DragCursor};
  __property   Rowgrid_tlb::TxDragMode DragMode = {read = get_DragMode, write = set_DragMode};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   IFontDisp*      Font = {read = get_Font, write = set_Font};
  __property   VARIANT_BOOL    ParentColor = {read = get_ParentColor, write = set_ParentColor};
  __property   VARIANT_BOOL    Visible = {read = get_Visible, write = set_Visible};
  __property   VARIANT_BOOL    DoubleBuffered = {read = get_DoubleBuffered, write = set_DoubleBuffered};
  __property   VARIANT_BOOL    AlignDisabled = {read = get_AlignDisabled};
  __property   long            VisibleDockClientCount = {read = get_VisibleDockClientCount};
  __property   long            ClientWidth = {read = get_ClientWidth, write = set_ClientWidth};
  __property   long            ClientHeight = {read = get_ClientHeight, write = set_ClientHeight};
  __property   VARIANT_BOOL    VerticalRows = {read = get_VerticalRows, write = set_VerticalRows};
  __property   VARIANT_BOOL    AltKeyInserts = {read = get_AltKeyInserts, write = set_AltKeyInserts};
  __property   VARIANT_BOOL    ShiftKeyHolds = {read = get_ShiftKeyHolds, write = set_ShiftKeyHolds};
  __property   Rowgrid_tlb::TxCellState CellState = {read = get_CellState};
  __property   Rowgrid_tlb::IRowCellX* DragCell = {read = get_DragCell, write = set_DragCell};
  __property   VARIANT_BOOL    ShiftKeySwaps = {read = get_ShiftKeySwaps, write = set_ShiftKeySwaps};
};
typedef IRowGridXDispT<IRowGridX> IRowGridXDisp;

// *********************************************************************//
// DispIntf:  IRowGridXEvents
// Flags:     (4096) Dispatchable
// GUID:      {6A7E7D31-E04C-4D89-B086-5FDE2D6921DB}
// *********************************************************************//
template <class T>
class IRowGridXEventsDispT : public TAutoDriver<IRowGridXEvents>
{
public:
  IRowGridXEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall OnKeyPress(short* Key/*[in,out]*/);
  void            __fastcall OnCanResize(long* NewWidth/*[in,out]*/, long* NewHeight/*[in,out]*/, 
                                         VARIANT_BOOL* Resize/*[in,out]*/);
  void            __fastcall OnClick();
  void            __fastcall OnConstrainedResize(long* MinWidth/*[in,out]*/, 
                                                 long* MinHeight/*[in,out]*/, 
                                                 long* MaxWidth/*[in,out]*/, 
                                                 long* MaxHeight/*[in,out]*/);
  void            __fastcall OnDblClick();
  void            __fastcall OnResize();
  void            __fastcall OnInsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                             VARIANT_BOOL* CanInsert/*[in,out]*/);
  void            __fastcall OnRemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                             VARIANT_BOOL* CanRemove/*[in,out]*/);
  void            __fastcall OnDrawRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                           Rowgrid_tlb::IRectX* RectX/*[in]*/);
  void            __fastcall OnDragRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                           Rowgrid_tlb::TxCellState CellState/*[in]*/, 
                                           VARIANT_BOOL IsCopy/*[in]*/, 
                                           VARIANT_BOOL* CanDrag/*[in,out]*/);
  void            __fastcall OnDblClickRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);
  void            __fastcall OnMouseDown(Rowgrid_tlb::TxMouseButton MouseButton/*[in]*/, 
                                         unsigned_char ShiftState/*[in]*/, long X/*[in]*/, 
                                         long Y/*[in]*/);
  void            __fastcall OnMouseUp(Rowgrid_tlb::TxMouseButton MouseButton/*[in]*/, 
                                       unsigned_char ShiftState/*[in]*/, long X/*[in]*/, 
                                       long Y/*[in]*/);
  void            __fastcall OnMouseMove(unsigned_char ShiftState/*[in]*/, long X/*[in]*/, 
                                         long Y/*[in]*/);
  void            __fastcall OnKeyDown(unsigned_short* Key/*[in,out]*/, 
                                       unsigned_char ShiftState/*[in]*/);
  void            __fastcall OnDrawRowLine(long Row/*[in]*/, Rowgrid_tlb::IRectX* RectX/*[in]*/);
  void            __fastcall OnClearRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                            VARIANT_BOOL* CanClear/*[in,out]*/);
  void            __fastcall OnPaint();
  void            __fastcall OnDrawFocusRect(Rowgrid_tlb::IRectX* RectX/*[in]*/);

};
typedef IRowGridXEventsDispT<IRowGridXEvents> IRowGridXEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIRowCellX
// Interface: IRowCellX
// *********************************************************************//
template <class T /* IRowCellX */ >
class TCOMIRowCellXT : public TComInterface<IRowCellX>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRowCellXT() {}
  TCOMIRowCellXT(IRowCellX *intf, bool addRef = false) : TComInterface<IRowCellX>(intf, addRef) {}
  TCOMIRowCellXT(const TCOMIRowCellXT& src) : TComInterface<IRowCellX>(src) {}
  TCOMIRowCellXT& operator=(const TCOMIRowCellXT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Row(long* Value/*[out,retval]*/);
  long            __fastcall get_Row(void);
  HRESULT         __fastcall set_Row(long Value/*[in]*/);
  HRESULT         __fastcall get_Start(long* Value/*[out,retval]*/);
  long            __fastcall get_Start(void);
  HRESULT         __fastcall set_Start(long Value/*[in]*/);
  HRESULT         __fastcall get_Units(long* Value/*[out,retval]*/);
  long            __fastcall get_Units(void);
  HRESULT         __fastcall set_Units(long Value/*[in]*/);
  HRESULT         __fastcall get_Zorder(long* Value/*[out,retval]*/);
  long            __fastcall get_Zorder(void);
  HRESULT         __fastcall set_Zorder(long Value/*[in]*/);
  HRESULT         __fastcall get_ObjectPtr(void** Value/*[out,retval]*/);
  void*           __fastcall get_ObjectPtr(void);
  HRESULT         __fastcall set_ObjectPtr(void* Value/*[in]*/);
  HRESULT         __fastcall equals(VARIANT_BOOL* IsEqual/*[out]*/, 
                                    Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/);

  __property   long            Row = {read = get_Row};
  __property   long            Start = {read = get_Start};
  __property   long            Units = {read = get_Units};
  __property   long            Zorder = {read = get_Zorder};
  __property   void*           ObjectPtr = {read = get_ObjectPtr};
};
typedef TCOMIRowCellXT<IRowCellX> TCOMIRowCellX;

// *********************************************************************//
// SmartIntf: TCOMIRectX
// Interface: IRectX
// *********************************************************************//
template <class T /* IRectX */ >
class TCOMIRectXT : public TComInterface<IRectX>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIRectXT() {}
  TCOMIRectXT(IRectX *intf, bool addRef = false) : TComInterface<IRectX>(intf, addRef) {}
  TCOMIRectXT(const TCOMIRectXT& src) : TComInterface<IRectX>(src) {}
  TCOMIRectXT& operator=(const TCOMIRectXT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Left(long* Value/*[out,retval]*/);
  long            __fastcall get_Left(void);
  HRESULT         __fastcall set_Left(long Value/*[in]*/);
  HRESULT         __fastcall get_Top(long* Value/*[out,retval]*/);
  long            __fastcall get_Top(void);
  HRESULT         __fastcall set_Top(long Value/*[in]*/);
  HRESULT         __fastcall get_Right(long* Value/*[out,retval]*/);
  long            __fastcall get_Right(void);
  HRESULT         __fastcall set_Right(long Value/*[in]*/);
  HRESULT         __fastcall get_Bottom(long* Value/*[out,retval]*/);
  long            __fastcall get_Bottom(void);
  HRESULT         __fastcall set_Bottom(long Value/*[in]*/);

  __property   long            Left = {read = get_Left};
  __property   long            Top = {read = get_Top};
  __property   long            Right = {read = get_Right};
  __property   long            Bottom = {read = get_Bottom};
};
typedef TCOMIRectXT<IRectX> TCOMIRectX;

// *********************************************************************//
// SmartIntf: TCOMIRowGridX
// Interface: IRowGridX
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_DragState(Rowgrid_tlb::TxDragState* Value/*[out,retval]*/)
{
  return (*this)->get_DragState(Value);
}

template <class T> Rowgrid_tlb::TxDragState __fastcall
TCOMIRowGridXT<T>::get_DragState(void)
{
  Rowgrid_tlb::TxDragState Value;
  OLECHECK(this->get_DragState((Rowgrid_tlb::TxDragState*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::ClearDragState(void)
{
  return (*this)->ClearDragState();
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_Units(long* Value/*[out,retval]*/)
{
  return (*this)->get_Units(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_Units(void)
{
  long Value;
  OLECHECK(this->get_Units((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_Units(long Value/*[in]*/)
{
  return (*this)->set_Units(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_TickColor(::OLE_COLOR* Value/*[out,retval]*/)
{
  return (*this)->get_TickColor(Value);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIRowGridXT<T>::get_TickColor(void)
{
  ::OLE_COLOR Value;
  OLECHECK(this->get_TickColor((::OLE_COLOR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_TickColor(::OLE_COLOR Value/*[in]*/)
{
  return (*this)->set_TickColor(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_RowCount(long* Value/*[out,retval]*/)
{
  return (*this)->get_RowCount(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_RowCount(void)
{
  long Value;
  OLECHECK(this->get_RowCount((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_RowCount(long Value/*[in]*/)
{
  return (*this)->set_RowCount(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_RowHeight(long* Value/*[out,retval]*/)
{
  return (*this)->get_RowHeight(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_RowHeight(void)
{
  long Value;
  OLECHECK(this->get_RowHeight((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_RowHeight(long Value/*[in]*/)
{
  return (*this)->set_RowHeight(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_RowLineWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_RowLineWidth(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_RowLineWidth(void)
{
  long Value;
  OLECHECK(this->get_RowLineWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_RowLineWidth(long Value/*[in]*/)
{
  return (*this)->set_RowLineWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_UnitWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_UnitWidth(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_UnitWidth(void)
{
  long Value;
  OLECHECK(this->get_UnitWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_UnitWidth(long Value/*[in]*/)
{
  return (*this)->set_UnitWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_FrameWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_FrameWidth(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_FrameWidth(void)
{
  long Value;
  OLECHECK(this->get_FrameWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_FrameWidth(long Value/*[in]*/)
{
  return (*this)->set_FrameWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_CellFrameWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_CellFrameWidth(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_CellFrameWidth(void)
{
  long Value;
  OLECHECK(this->get_CellFrameWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_CellFrameWidth(long Value/*[in]*/)
{
  return (*this)->set_CellFrameWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_CellBorderWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_CellBorderWidth(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_CellBorderWidth(void)
{
  long Value;
  OLECHECK(this->get_CellBorderWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_CellBorderWidth(long Value/*[in]*/)
{
  return (*this)->set_CellBorderWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_DefaultDrawing(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DefaultDrawing(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_DefaultDrawing(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DefaultDrawing(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_DefaultDrawing(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DefaultDrawing((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_DefaultDrawing(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DefaultDrawing(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_DefaultDrawing(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_DefaultDrawing(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_CheckPosition(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_CheckPosition(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_CheckPosition(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_CheckPosition(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_CheckPosition(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_CheckPosition((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_CheckPosition(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_CheckPosition(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_CheckPosition(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_CheckPosition(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_MinVisible(long* Value/*[out,retval]*/)
{
  return (*this)->get_MinVisible(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_MinVisible(void)
{
  long Value;
  OLECHECK(this->get_MinVisible((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_MinVisible(long Value/*[in]*/)
{
  return (*this)->set_MinVisible(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_RowLineColor(::OLE_COLOR* Value/*[out,retval]*/)
{
  return (*this)->get_RowLineColor(Value);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIRowGridXT<T>::get_RowLineColor(void)
{
  ::OLE_COLOR Value;
  OLECHECK(this->get_RowLineColor((::OLE_COLOR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_RowLineColor(::OLE_COLOR Value/*[in]*/)
{
  return (*this)->set_RowLineColor(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_CellColor(::OLE_COLOR* Value/*[out,retval]*/)
{
  return (*this)->get_CellColor(Value);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIRowGridXT<T>::get_CellColor(void)
{
  ::OLE_COLOR Value;
  OLECHECK(this->get_CellColor((::OLE_COLOR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_CellColor(::OLE_COLOR Value/*[in]*/)
{
  return (*this)->set_CellColor(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Ctl3D(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_Ctl3D(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Ctl3D(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_Ctl3D(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Ctl3D((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_Ctl3D(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Ctl3D(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_Ctl3D(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Ctl3D(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ParentCtl3D(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ParentCtl3D(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ParentCtl3D(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_ParentCtl3D(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_ParentCtl3D((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_ParentCtl3D(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ParentCtl3D(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_ParentCtl3D(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  return (*this)->get_Color(Value);
}

template <class T> ::OLE_COLOR __fastcall
TCOMIRowGridXT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  OLECHECK(this->get_Color((::OLE_COLOR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  return (*this)->set_Color(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_DragCursor(short* Value/*[out,retval]*/)
{
  return (*this)->get_DragCursor(Value);
}

template <class T> short __fastcall
TCOMIRowGridXT<T>::get_DragCursor(void)
{
  short Value;
  OLECHECK(this->get_DragCursor((short*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_DragCursor(short Value/*[in]*/)
{
  return (*this)->set_DragCursor(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_DragMode(Rowgrid_tlb::TxDragMode* Value/*[out,retval]*/)
{
  return (*this)->get_DragMode(Value);
}

template <class T> Rowgrid_tlb::TxDragMode __fastcall
TCOMIRowGridXT<T>::get_DragMode(void)
{
  Rowgrid_tlb::TxDragMode Value;
  OLECHECK(this->get_DragMode((Rowgrid_tlb::TxDragMode*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_DragMode(Rowgrid_tlb::TxDragMode Value/*[in]*/)
{
  return (*this)->set_DragMode(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_Enabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Enabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Enabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_Enabled(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Enabled(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  return (*this)->get_Font(Value);
}

template <class T> IFontDisp* __fastcall
TCOMIRowGridXT<T>::get_Font(void)
{
  IFontDisp* Value;
  OLECHECK(this->get_Font((IFontDisp**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  return (*this)->set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  return (*this)->_set_Font(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ParentColor(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ParentColor(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ParentColor(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_ParentColor(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_ParentColor((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ParentColor(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_ParentColor(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ParentColor(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_ParentColor(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_Visible(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Visible(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_Visible((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_Visible(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_Visible(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_Visible(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DoubleBuffered(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_DoubleBuffered(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_DoubleBuffered(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_DoubleBuffered((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_DoubleBuffered(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_DoubleBuffered(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_DoubleBuffered(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_AlignDisabled(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AlignDisabled(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AlignDisabled((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  return (*this)->get_VisibleDockClientCount(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  OLECHECK(this->get_VisibleDockClientCount((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/)
{
  return (*this)->DrawTextBiDiModeFlagsReadingOnly(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::DrawTextBiDiModeFlagsReadingOnly(void)
{
  long Value;
  OLECHECK(this->DrawTextBiDiModeFlagsReadingOnly((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->IsRightToLeft(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIRowGridXT<T>::IsRightToLeft(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->IsRightToLeft((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->UseRightToLeftReading(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIRowGridXT<T>::UseRightToLeftReading(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->UseRightToLeftReading((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->UseRightToLeftScrollBar(Value);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIRowGridXT<T>::UseRightToLeftScrollBar(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->UseRightToLeftScrollBar((VARIANT_BOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/)
{
  return (*this)->SetSubComponent(IsSubComponent);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::GetCellArray(LPSAFEARRAY* RowCells/*[out]*/, long* ArraySize/*[out]*/, 
                                long Row/*[in]*/)
{
  return (*this)->GetCellArray(RowCells, ArraySize, Row);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::InsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  return (*this)->InsertRowCell(RowCellX);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::RemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  return (*this)->RemoveRowCell(RowCellX);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::MouseToCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out]*/, long X/*[in]*/, 
                               long Y/*[in]*/, Rowgrid_tlb::TxCellState* CellState/*[out]*/)
{
  return (*this)->MouseToCell(RowCellX, X, Y, CellState);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ClientWidth(long* Value/*[out,retval]*/)
{
  return (*this)->get_ClientWidth(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_ClientWidth(void)
{
  long Value;
  OLECHECK(this->get_ClientWidth((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ClientWidth(long Value/*[in]*/)
{
  return (*this)->set_ClientWidth(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ClientHeight(long* Value/*[out,retval]*/)
{
  return (*this)->get_ClientHeight(Value);
}

template <class T> long __fastcall
TCOMIRowGridXT<T>::get_ClientHeight(void)
{
  long Value;
  OLECHECK(this->get_ClientHeight((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ClientHeight(long Value/*[in]*/)
{
  return (*this)->set_ClientHeight(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_HDC(void** Value/*[out,retval]*/)
{
  return (*this)->get_HDC(Value);
}

template <class T> void* __fastcall
TCOMIRowGridXT<T>::get_HDC(void)
{
  void* Value = 0;
  OLECHECK(this->get_HDC((void**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::ClearRow(long Row/*[in]*/)
{
  return (*this)->ClearRow(Row);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_VerticalRows(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_VerticalRows(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_VerticalRows(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_VerticalRows(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_VerticalRows(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_VerticalRows((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_VerticalRows(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_VerticalRows(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_VerticalRows(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_VerticalRows(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_AltKeyInserts(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AltKeyInserts(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_AltKeyInserts(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_AltKeyInserts(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_AltKeyInserts(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_AltKeyInserts((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_AltKeyInserts(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_AltKeyInserts(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_AltKeyInserts(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_AltKeyInserts(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ShiftKeyHolds(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ShiftKeyHolds(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ShiftKeyHolds(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ShiftKeyHolds(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_ShiftKeyHolds(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_ShiftKeyHolds((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ShiftKeyHolds(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_ShiftKeyHolds(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ShiftKeyHolds(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_ShiftKeyHolds(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_CellState(Rowgrid_tlb::TxCellState* Value/*[out,retval]*/)
{
  return (*this)->get_CellState(Value);
}

template <class T> Rowgrid_tlb::TxCellState __fastcall
TCOMIRowGridXT<T>::get_CellState(void)
{
  Rowgrid_tlb::TxCellState Value;
  OLECHECK(this->get_CellState((Rowgrid_tlb::TxCellState*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_DragCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out,retval]*/)
{
  return (*this)->get_DragCell(RowCellX);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_DragCell(Rowgrid_tlb::IRowCellXPtr* RowCellX/*[out,retval]*/)
{
  return (*this)->get_DragCell(IRowCellX**)RowCellX);
}

template <class T> Rowgrid_tlb::IRowCellXPtr __fastcall
TCOMIRowGridXT<T>::get_DragCell(void)
{
  Rowgrid_tlb::IRowCellX* RowCellX;
  OLECHECK(this->get_DragCell((Rowgrid_tlb::IRowCellX**)&RowCellX));
  return (Rowgrid_tlb::IRowCellXPtr)RowCellX;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_DragCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  return (*this)->set_DragCell(RowCellX);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_DragCell(Rowgrid_tlb::IRowCellXPtr RowCellX/*[in]*/)
{
  return (*this)->set_DragCell(IRowCellX*)RowCellX);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::SortRow(long Row/*[in]*/)
{
  return (*this)->SortRow(Row);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ShiftKeySwaps(VARIANT_BOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ShiftKeySwaps(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::get_ShiftKeySwaps(TOLEBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ShiftKeySwaps(VARIANT_BOOL*)Value);
}

template <class T> TOLEBOOL __fastcall
TCOMIRowGridXT<T>::get_ShiftKeySwaps(void)
{
  VARIANT_BOOL Value;
  OLECHECK(this->get_ShiftKeySwaps((VARIANT_BOOL*)&Value));
  return (TOLEBOOL)Value;
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ShiftKeySwaps(VARIANT_BOOL Value/*[in]*/)
{
  return (*this)->set_ShiftKeySwaps(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::set_ShiftKeySwaps(TOLEBOOL Value/*[in]*/)
{
  return (*this)->set_ShiftKeySwaps(VARIANT_BOOL)Value);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::PaintCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                             VARIANT_BOOL ClearOnly/*[in]*/)
{
  return (*this)->PaintCell(RowCellX, ClearOnly);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::CellRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, 
                            Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  return (*this)->CellRect(RectX, RowCellX);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::RowLineRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, long Row/*[in]*/)
{
  return (*this)->RowLineRect(RectX, Row);
}

template <class T> HRESULT __fastcall
TCOMIRowGridXT<T>::ToggleFocus(void)
{
  return (*this)->ToggleFocus();
}

// *********************************************************************//
// DispIntf:  IRowGridX
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {4925E453-CF76-4DB6-B490-B281D1A9431F}
// *********************************************************************//
template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_DragState(Rowgrid_tlb::TxDragState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragState"), DISPID(1));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Rowgrid_tlb::TxDragState __fastcall
IRowGridXDispT<T>::get_DragState(void)
{
  Rowgrid_tlb::TxDragState Value;
  this->get_DragState((Rowgrid_tlb::TxDragState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::ClearDragState()
{
  _TDispID _dispid(*this, OLETEXT("ClearDragState"), DISPID(4));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_Units(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Units"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_Units(void)
{
  long Value;
  this->get_Units((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_Units(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Units"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_TickColor(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickColor"), DISPID(10));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IRowGridXDispT<T>::get_TickColor(void)
{
  ::OLE_COLOR Value;
  this->get_TickColor((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_TickColor(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TickColor"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_RowCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowCount"), DISPID(11));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_RowCount(void)
{
  long Value;
  this->get_RowCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_RowCount(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowCount"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_RowHeight(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowHeight"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_RowHeight(void)
{
  long Value;
  this->get_RowHeight((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_RowHeight(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowHeight"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_RowLineWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowLineWidth"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_RowLineWidth(void)
{
  long Value;
  this->get_RowLineWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_RowLineWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowLineWidth"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_UnitWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnitWidth"), DISPID(14));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_UnitWidth(void)
{
  long Value;
  this->get_UnitWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_UnitWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UnitWidth"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_FrameWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameWidth"), DISPID(15));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_FrameWidth(void)
{
  long Value;
  this->get_FrameWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_FrameWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FrameWidth"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_CellFrameWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellFrameWidth"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_CellFrameWidth(void)
{
  long Value;
  this->get_CellFrameWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_CellFrameWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellFrameWidth"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_CellBorderWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellBorderWidth"), DISPID(17));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_CellBorderWidth(void)
{
  long Value;
  this->get_CellBorderWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_CellBorderWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellBorderWidth"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_DefaultDrawing(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultDrawing"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_DefaultDrawing(void)
{
  VARIANT_BOOL Value;
  this->get_DefaultDrawing((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_DefaultDrawing(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DefaultDrawing"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_CheckPosition(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckPosition"), DISPID(19));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_CheckPosition(void)
{
  VARIANT_BOOL Value;
  this->get_CheckPosition((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_CheckPosition(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CheckPosition"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_MinVisible(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinVisible"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_MinVisible(void)
{
  long Value;
  this->get_MinVisible((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_MinVisible(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MinVisible"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_RowLineColor(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowLineColor"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IRowGridXDispT<T>::get_RowLineColor(void)
{
  ::OLE_COLOR Value;
  this->get_RowLineColor((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_RowLineColor(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowLineColor"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_CellColor(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellColor"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IRowGridXDispT<T>::get_CellColor(void)
{
  ::OLE_COLOR Value;
  this->get_CellColor((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_CellColor(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellColor"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_Ctl3D(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ctl3D"), DISPID(24));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_Ctl3D(void)
{
  VARIANT_BOOL Value;
  this->get_Ctl3D((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_Ctl3D(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Ctl3D"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_ParentCtl3D(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentCtl3D"), DISPID(25));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_ParentCtl3D(void)
{
  VARIANT_BOOL Value;
  this->get_ParentCtl3D((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_ParentCtl3D(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentCtl3D"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_Color(::OLE_COLOR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_UI4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> ::OLE_COLOR __fastcall
IRowGridXDispT<T>::get_Color(void)
{
  ::OLE_COLOR Value;
  this->get_Color((::OLE_COLOR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_Color(::OLE_COLOR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Color"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_UI4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_DragCursor(short* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragCursor"), DISPID(26));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I2:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> short __fastcall
IRowGridXDispT<T>::get_DragCursor(void)
{
  short Value;
  this->get_DragCursor((short*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_DragCursor(short Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragCursor"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I2:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_DragMode(Rowgrid_tlb::TxDragMode* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragMode"), DISPID(27));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Rowgrid_tlb::TxDragMode __fastcall
IRowGridXDispT<T>::get_DragMode(void)
{
  Rowgrid_tlb::TxDragMode Value;
  this->get_DragMode((Rowgrid_tlb::TxDragMode*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_DragMode(Rowgrid_tlb::TxDragMode Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragMode"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_Enabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_Enabled(void)
{
  VARIANT_BOOL Value;
  this->get_Enabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_Enabled(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_Font(IFontDisp** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> IFontDisp* __fastcall
IRowGridXDispT<T>::get_Font(void)
{
  IFontDisp* Value;
  this->get_Font((IFontDisp**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_Font(IFontDisp* Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IFontDisp*)Value /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::_set_Font(IFontDisp** Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH*)(IFontDisp**)Value /*[VT_USERDEFINED:2]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_ParentColor(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentColor"), DISPID(28));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_ParentColor(void)
{
  VARIANT_BOOL Value;
  this->get_ParentColor((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_ParentColor(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ParentColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_Visible(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(29));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_Visible(void)
{
  VARIANT_BOOL Value;
  this->get_Visible((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_Visible(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Visible"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_DoubleBuffered(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(30));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_DoubleBuffered(void)
{
  VARIANT_BOOL Value;
  this->get_DoubleBuffered((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_DoubleBuffered(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoubleBuffered"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_AlignDisabled(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AlignDisabled"), DISPID(31));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_AlignDisabled(void)
{
  VARIANT_BOOL Value;
  this->get_AlignDisabled((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_VisibleDockClientCount(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VisibleDockClientCount"), DISPID(32));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_VisibleDockClientCount(void)
{
  long Value;
  this->get_VisibleDockClientCount((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::DrawTextBiDiModeFlagsReadingOnly(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DrawTextBiDiModeFlagsReadingOnly"), DISPID(34));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::DrawTextBiDiModeFlagsReadingOnly(void)
{
  long Value;
  this->DrawTextBiDiModeFlagsReadingOnly((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::IsRightToLeft(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsRightToLeft"), DISPID(36));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::IsRightToLeft(void)
{
  VARIANT_BOOL Value;
  this->IsRightToLeft((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::UseRightToLeftReading(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseRightToLeftReading"), DISPID(39));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::UseRightToLeftReading(void)
{
  VARIANT_BOOL Value;
  this->UseRightToLeftReading((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::UseRightToLeftScrollBar(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UseRightToLeftScrollBar"), DISPID(40));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::UseRightToLeftScrollBar(void)
{
  VARIANT_BOOL Value;
  this->UseRightToLeftScrollBar((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::SetSubComponent(VARIANT_BOOL IsSubComponent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetSubComponent"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = IsSubComponent /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::GetCellArray(LPSAFEARRAY* RowCells/*[out]*/, long* ArraySize/*[out]*/, 
                                long Row/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCellArray"), DISPID(2));
  TAutoArgs<3> _args;
  _args[1] = RowCells /*[VT_SAFEARRAY:1]*/;
  _args[2] = ArraySize /*[VT_I4:1]*/;
  _args[3] = Row /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::InsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InsertRowCell"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::RemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveRowCell"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::MouseToCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out]*/, long X/*[in]*/, 
                               long Y/*[in]*/, Rowgrid_tlb::TxCellState* CellState/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("MouseToCell"), DISPID(7));
  TAutoArgs<4> _args;
  _args[1] = (LPUNKNOWN*)(Rowgrid_tlb::IRowCellX**)RowCellX /*[VT_USERDEFINED:2]*/;
  _args[2] = X /*[VT_I4:0]*/;
  _args[3] = Y /*[VT_I4:0]*/;
  _args[4] = (int*)CellState /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_ClientWidth(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientWidth"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_ClientWidth(void)
{
  long Value;
  this->get_ClientWidth((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_ClientWidth(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientWidth"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_ClientHeight(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientHeight"), DISPID(33));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IRowGridXDispT<T>::get_ClientHeight(void)
{
  long Value;
  this->get_ClientHeight((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_ClientHeight(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClientHeight"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_HDC(/*AUTO_PARAM_ERROR(void** Value)*/ TVariant*  Value)
{
  _TDispID _dispid(*this, OLETEXT("HDC"), DISPID(6));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_VOID:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::ClearRow(long Row/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearRow"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = Row /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_VerticalRows(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalRows"), DISPID(37));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_VerticalRows(void)
{
  VARIANT_BOOL Value;
  this->get_VerticalRows((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_VerticalRows(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("VerticalRows"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_AltKeyInserts(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AltKeyInserts"), DISPID(38));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_AltKeyInserts(void)
{
  VARIANT_BOOL Value;
  this->get_AltKeyInserts((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_AltKeyInserts(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AltKeyInserts"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_ShiftKeyHolds(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShiftKeyHolds"), DISPID(41));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_ShiftKeyHolds(void)
{
  VARIANT_BOOL Value;
  this->get_ShiftKeyHolds((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_ShiftKeyHolds(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShiftKeyHolds"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_CellState(Rowgrid_tlb::TxCellState* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellState"), DISPID(43));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Rowgrid_tlb::TxCellState __fastcall
IRowGridXDispT<T>::get_CellState(void)
{
  Rowgrid_tlb::TxCellState Value;
  this->get_CellState((Rowgrid_tlb::TxCellState*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_DragCell(Rowgrid_tlb::IRowCellX** RowCellX/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragCell"), DISPID(44));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPUNKNOWN*)(Rowgrid_tlb::IRowCellX**)RowCellX /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Rowgrid_tlb::IRowCellX* __fastcall
IRowGridXDispT<T>::get_DragCell(void)
{
  Rowgrid_tlb::IRowCellX* RowCellX;
  this->get_DragCell((Rowgrid_tlb::IRowCellX**)&RowCellX);
  return RowCellX;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_DragCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DragCell"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::SortRow(long Row/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SortRow"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = Row /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::get_ShiftKeySwaps(VARIANT_BOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShiftKeySwaps"), DISPID(20));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IRowGridXDispT<T>::get_ShiftKeySwaps(void)
{
  VARIANT_BOOL Value;
  this->get_ShiftKeySwaps((VARIANT_BOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::set_ShiftKeySwaps(VARIANT_BOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ShiftKeySwaps"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::PaintCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                             VARIANT_BOOL ClearOnly/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PaintCell"), DISPID(46));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  _args[2] = ClearOnly /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::CellRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, 
                            Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CellRect"), DISPID(47));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN*)(Rowgrid_tlb::IRectX**)RectX /*[VT_USERDEFINED:2]*/;
  _args[2] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::RowLineRect(Rowgrid_tlb::IRectX** RectX/*[out]*/, long Row/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RowLineRect"), DISPID(48));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN*)(Rowgrid_tlb::IRectX**)RectX /*[VT_USERDEFINED:2]*/;
  _args[2] = Row /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IRowGridXDispT<T>::ToggleFocus()
{
  _TDispID _dispid(*this, OLETEXT("ToggleFocus"), DISPID(49));
  return OleFunction(_dispid);
}

// *********************************************************************//
// DispIntf:  IRowGridXEvents
// Flags:     (4096) Dispatchable
// GUID:      {6A7E7D31-E04C-4D89-B086-5FDE2D6921DB}
// *********************************************************************//
template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnKeyPress(short* Key/*[in,out]*/)
{
  _TDispID _dispid(/* OnKeyPress */ DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Key /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnCanResize(long* NewWidth/*[in,out]*/, long* NewHeight/*[in,out]*/, 
                                     VARIANT_BOOL* Resize/*[in,out]*/)
{
  _TDispID _dispid(/* OnCanResize */ DISPID(14));
  TAutoArgs<3> _args;
  _args[1] = NewWidth /*[VT_I4:1]*/;
  _args[2] = NewHeight /*[VT_I4:1]*/;
  _args[3] = Resize /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnClick()
{
  _TDispID _dispid(/* OnClick */ DISPID(15));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnConstrainedResize(long* MinWidth/*[in,out]*/, long* MinHeight/*[in,out]*/
                                             , long* MaxWidth/*[in,out]*/, 
                                             long* MaxHeight/*[in,out]*/)
{
  _TDispID _dispid(/* OnConstrainedResize */ DISPID(16));
  TAutoArgs<4> _args;
  _args[1] = MinWidth /*[VT_I4:1]*/;
  _args[2] = MinHeight /*[VT_I4:1]*/;
  _args[3] = MaxWidth /*[VT_I4:1]*/;
  _args[4] = MaxHeight /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnDblClick()
{
  _TDispID _dispid(/* OnDblClick */ DISPID(18));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnResize()
{
  _TDispID _dispid(/* OnResize */ DISPID(29));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnInsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                         VARIANT_BOOL* CanInsert/*[in,out]*/)
{
  _TDispID _dispid(/* OnInsertRowCell */ DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  _args[2] = CanInsert /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnRemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                         VARIANT_BOOL* CanRemove/*[in,out]*/)
{
  _TDispID _dispid(/* OnRemoveRowCell */ DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  _args[2] = CanRemove /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnDrawRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                       Rowgrid_tlb::IRectX* RectX/*[in]*/)
{
  _TDispID _dispid(/* OnDrawRowCell */ DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPUNKNOWN)(Rowgrid_tlb::IRectX*)RectX /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnDragRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                       Rowgrid_tlb::TxCellState CellState/*[in]*/, 
                                       VARIANT_BOOL IsCopy/*[in]*/, 
                                       VARIANT_BOOL* CanDrag/*[in,out]*/)
{
  _TDispID _dispid(/* OnDragRowCell */ DISPID(4));
  TAutoArgs<4> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  _args[2] = (int)CellState /*[VT_USERDEFINED:0]*/;
  _args[3] = IsCopy /*[VT_BOOL:0]*/;
  _args[4] = CanDrag /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnDblClickRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  _TDispID _dispid(/* OnDblClickRowCell */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnMouseDown(Rowgrid_tlb::TxMouseButton MouseButton/*[in]*/, 
                                     unsigned_char ShiftState/*[in]*/, long X/*[in]*/, 
                                     long Y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseDown */ DISPID(7));
  TAutoArgs<4> _args;
  _args[1] = (int)MouseButton /*[VT_USERDEFINED:0]*/;
  _args[2] = ShiftState /*[VT_UI1:0]*/;
  _args[3] = X /*[VT_I4:0]*/;
  _args[4] = Y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnMouseUp(Rowgrid_tlb::TxMouseButton MouseButton/*[in]*/, 
                                   unsigned_char ShiftState/*[in]*/, long X/*[in]*/, long Y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseUp */ DISPID(8));
  TAutoArgs<4> _args;
  _args[1] = (int)MouseButton /*[VT_USERDEFINED:0]*/;
  _args[2] = ShiftState /*[VT_UI1:0]*/;
  _args[3] = X /*[VT_I4:0]*/;
  _args[4] = Y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnMouseMove(unsigned_char ShiftState/*[in]*/, long X/*[in]*/, 
                                     long Y/*[in]*/)
{
  _TDispID _dispid(/* OnMouseMove */ DISPID(9));
  TAutoArgs<3> _args;
  _args[1] = ShiftState /*[VT_UI1:0]*/;
  _args[2] = X /*[VT_I4:0]*/;
  _args[3] = Y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnKeyDown(unsigned_short* Key/*[in,out]*/, unsigned_char ShiftState/*[in]*/)
{
  _TDispID _dispid(/* OnKeyDown */ DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = Key /*[VT_UI2:1]*/;
  _args[2] = ShiftState /*[VT_UI1:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnDrawRowLine(long Row/*[in]*/, Rowgrid_tlb::IRectX* RectX/*[in]*/)
{
  _TDispID _dispid(/* OnDrawRowLine */ DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = Row /*[VT_I4:0]*/;
  _args[2] = (LPUNKNOWN)(Rowgrid_tlb::IRectX*)RectX /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnClearRowCell(Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/, 
                                        VARIANT_BOOL* CanClear/*[in,out]*/)
{
  _TDispID _dispid(/* OnClearRowCell */ DISPID(13));
  TAutoArgs<2> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRowCellX*)RowCellX /*[VT_USERDEFINED:1]*/;
  _args[2] = CanClear /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnPaint()
{
  _TDispID _dispid(/* OnPaint */ DISPID(5));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
IRowGridXEventsDispT<T>::OnDrawFocusRect(Rowgrid_tlb::IRectX* RectX/*[in]*/)
{
  _TDispID _dispid(/* OnDrawFocusRect */ DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (LPUNKNOWN)(Rowgrid_tlb::IRectX*)RectX /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIRowCellX
// Interface: IRowCellX
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::get_Row(long* Value/*[out,retval]*/)
{
  return (*this)->get_Row(Value);
}

template <class T> long __fastcall
TCOMIRowCellXT<T>::get_Row(void)
{
  long Value;
  OLECHECK(this->get_Row((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::set_Row(long Value/*[in]*/)
{
  return (*this)->set_Row(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::get_Start(long* Value/*[out,retval]*/)
{
  return (*this)->get_Start(Value);
}

template <class T> long __fastcall
TCOMIRowCellXT<T>::get_Start(void)
{
  long Value;
  OLECHECK(this->get_Start((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::set_Start(long Value/*[in]*/)
{
  return (*this)->set_Start(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::get_Units(long* Value/*[out,retval]*/)
{
  return (*this)->get_Units(Value);
}

template <class T> long __fastcall
TCOMIRowCellXT<T>::get_Units(void)
{
  long Value;
  OLECHECK(this->get_Units((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::set_Units(long Value/*[in]*/)
{
  return (*this)->set_Units(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::get_Zorder(long* Value/*[out,retval]*/)
{
  return (*this)->get_Zorder(Value);
}

template <class T> long __fastcall
TCOMIRowCellXT<T>::get_Zorder(void)
{
  long Value;
  OLECHECK(this->get_Zorder((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::set_Zorder(long Value/*[in]*/)
{
  return (*this)->set_Zorder(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::get_ObjectPtr(void** Value/*[out,retval]*/)
{
  return (*this)->get_ObjectPtr(Value);
}

template <class T> void* __fastcall
TCOMIRowCellXT<T>::get_ObjectPtr(void)
{
  void* Value = 0;
  OLECHECK(this->get_ObjectPtr((void**)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::set_ObjectPtr(void* Value/*[in]*/)
{
  return (*this)->set_ObjectPtr(Value);
}

template <class T> HRESULT __fastcall
TCOMIRowCellXT<T>::equals(VARIANT_BOOL* IsEqual/*[out]*/, Rowgrid_tlb::IRowCellX* RowCellX/*[in]*/)
{
  return (*this)->equals(IsEqual, RowCellX);
}

// *********************************************************************//
// SmartIntf: TCOMIRectX
// Interface: IRectX
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIRectXT<T>::get_Left(long* Value/*[out,retval]*/)
{
  return (*this)->get_Left(Value);
}

template <class T> long __fastcall
TCOMIRectXT<T>::get_Left(void)
{
  long Value;
  OLECHECK(this->get_Left((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRectXT<T>::set_Left(long Value/*[in]*/)
{
  return (*this)->set_Left(Value);
}

template <class T> HRESULT __fastcall
TCOMIRectXT<T>::get_Top(long* Value/*[out,retval]*/)
{
  return (*this)->get_Top(Value);
}

template <class T> long __fastcall
TCOMIRectXT<T>::get_Top(void)
{
  long Value;
  OLECHECK(this->get_Top((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRectXT<T>::set_Top(long Value/*[in]*/)
{
  return (*this)->set_Top(Value);
}

template <class T> HRESULT __fastcall
TCOMIRectXT<T>::get_Right(long* Value/*[out,retval]*/)
{
  return (*this)->get_Right(Value);
}

template <class T> long __fastcall
TCOMIRectXT<T>::get_Right(void)
{
  long Value;
  OLECHECK(this->get_Right((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRectXT<T>::set_Right(long Value/*[in]*/)
{
  return (*this)->set_Right(Value);
}

template <class T> HRESULT __fastcall
TCOMIRectXT<T>::get_Bottom(long* Value/*[out,retval]*/)
{
  return (*this)->get_Bottom(Value);
}

template <class T> long __fastcall
TCOMIRectXT<T>::get_Bottom(void)
{
  long Value;
  OLECHECK(this->get_Bottom((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIRectXT<T>::set_Bottom(long Value/*[in]*/)
{
  return (*this)->set_Bottom(Value);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : RowGridX
// Event Interface : IRowGridXEvents
// *********************************************************************//
template <class T>
class TEvents_RowGridX : public IConnectionPointImpl<T,
                                                 &DIID_IRowGridXEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_OnKeyPress(short* Key);
  void            Fire_OnCanResize(long* NewWidth, long* NewHeight, VARIANT_BOOL* Resize);
  void            Fire_OnClick(void);
  void            Fire_OnConstrainedResize(long* MinWidth, long* MinHeight, long* MaxWidth, 
                                           long* MaxHeight);
  void            Fire_OnDblClick(void);
  void            Fire_OnResize(void);
  void            Fire_OnInsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX, VARIANT_BOOL* CanInsert);
  void            Fire_OnRemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX, VARIANT_BOOL* CanRemove);
  void            Fire_OnDrawRowCell(Rowgrid_tlb::IRowCellX* RowCellX, Rowgrid_tlb::IRectX* RectX);
  void            Fire_OnDragRowCell(Rowgrid_tlb::IRowCellX* RowCellX, 
                                     Rowgrid_tlb::TxCellState CellState, VARIANT_BOOL IsCopy, 
                                     VARIANT_BOOL* CanDrag);
  void            Fire_OnDblClickRowCell(Rowgrid_tlb::IRowCellX* RowCellX);
  void            Fire_OnMouseDown(Rowgrid_tlb::TxMouseButton MouseButton, unsigned_char ShiftState, 
                                   long X, long Y);
  void            Fire_OnMouseUp(Rowgrid_tlb::TxMouseButton MouseButton, unsigned_char ShiftState, 
                                 long X, long Y);
  void            Fire_OnMouseMove(unsigned_char ShiftState, long X, long Y);
  void            Fire_OnKeyDown(unsigned_short* Key, unsigned_char ShiftState);
  void            Fire_OnDrawRowLine(long Row, Rowgrid_tlb::IRectX* RectX);
  void            Fire_OnClearRowCell(Rowgrid_tlb::IRowCellX* RowCellX, VARIANT_BOOL* CanClear);
  void            Fire_OnPaint(void);
  void            Fire_OnDrawFocusRect(Rowgrid_tlb::IRectX* RectX);
protected:
  IRowGridXEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_RowGridX<T>::Fire_OnKeyPress(short* Key)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyPress(Key);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnCanResize(long* NewWidth, long* NewHeight, VARIANT_BOOL* Resize)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnCanResize(NewWidth, NewHeight, Resize);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnConstrainedResize(long* MinWidth, long* MinHeight, long* MaxWidth, 
                                              long* MaxHeight)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnConstrainedResize(MinWidth, MinHeight, MaxWidth, MaxHeight);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnDblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnResize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnResize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnInsertRowCell(Rowgrid_tlb::IRowCellX* RowCellX, VARIANT_BOOL* CanInsert)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnInsertRowCell(RowCellX, CanInsert);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnRemoveRowCell(Rowgrid_tlb::IRowCellX* RowCellX, VARIANT_BOOL* CanRemove)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnRemoveRowCell(RowCellX, CanRemove);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnDrawRowCell(Rowgrid_tlb::IRowCellX* RowCellX, Rowgrid_tlb::IRectX* RectX)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDrawRowCell(RowCellX, RectX);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnDragRowCell(Rowgrid_tlb::IRowCellX* RowCellX, 
                                        Rowgrid_tlb::TxCellState CellState, VARIANT_BOOL IsCopy, 
                                        VARIANT_BOOL* CanDrag)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDragRowCell(RowCellX, CellState, IsCopy, CanDrag);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnDblClickRowCell(Rowgrid_tlb::IRowCellX* RowCellX)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDblClickRowCell(RowCellX);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnMouseDown(Rowgrid_tlb::TxMouseButton MouseButton, 
                                      unsigned_char ShiftState, long X, long Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseDown(MouseButton, ShiftState, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnMouseUp(Rowgrid_tlb::TxMouseButton MouseButton, unsigned_char ShiftState, 
                                    long X, long Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseUp(MouseButton, ShiftState, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnMouseMove(unsigned_char ShiftState, long X, long Y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnMouseMove(ShiftState, X, Y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnKeyDown(unsigned_short* Key, unsigned_char ShiftState)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnKeyDown(Key, ShiftState);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnDrawRowLine(long Row, Rowgrid_tlb::IRectX* RectX)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDrawRowLine(Row, RectX);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnClearRowCell(Rowgrid_tlb::IRowCellX* RowCellX, VARIANT_BOOL* CanClear)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnClearRowCell(RowCellX, CanClear);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnPaint(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnPaint();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_RowGridX<T>::Fire_OnDrawFocusRect(Rowgrid_tlb::IRectX* RectX)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.OnDrawFocusRect(RectX);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Rowgrid_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Rowgrid_tlb;
#endif

#pragma option pop

#endif // RowGrid_TLBH
